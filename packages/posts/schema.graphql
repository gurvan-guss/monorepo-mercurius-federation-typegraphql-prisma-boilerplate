type AffectedRowsOutput {
  count: Int!
}

type AggregateCategoriesOnPosts {
  _count: CategoriesOnPostsCountAggregate
  _min: CategoriesOnPostsMinAggregate
  _max: CategoriesOnPostsMaxAggregate
}

type AggregateCategory {
  _count: CategoryCountAggregate
  _min: CategoryMinAggregate
  _max: CategoryMaxAggregate
}

type AggregatePost {
  _count: PostCountAggregate
  _min: PostMinAggregate
  _max: PostMaxAggregate
}

type CategoriesOnPosts {
  postId: String!
  categoryId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  post: Post!
  category: Category!
}

type CategoriesOnPostsCountAggregate {
  postId: Int!
  categoryId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

input CategoriesOnPostsCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  post: PostCreateNestedOneWithoutCategoriesInput!
  category: CategoryCreateNestedOneWithoutPostsInput!
}

input CategoriesOnPostsCreateManyCategoryInput {
  postId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoriesOnPostsCreateManyCategoryInputEnvelope {
  data: [CategoriesOnPostsCreateManyCategoryInput!]!
  skipDuplicates: Boolean
}

input CategoriesOnPostsCreateManyInput {
  postId: String!
  categoryId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoriesOnPostsCreateManyPostInput {
  categoryId: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoriesOnPostsCreateManyPostInputEnvelope {
  data: [CategoriesOnPostsCreateManyPostInput!]!
  skipDuplicates: Boolean
}

input CategoriesOnPostsCreateNestedManyWithoutCategoryInput {
  create: [CategoriesOnPostsCreateWithoutCategoryInput!]
  connectOrCreate: [CategoriesOnPostsCreateOrConnectWithoutCategoryInput!]
  createMany: CategoriesOnPostsCreateManyCategoryInputEnvelope
  connect: [CategoriesOnPostsWhereUniqueInput!]
}

input CategoriesOnPostsCreateNestedManyWithoutPostInput {
  create: [CategoriesOnPostsCreateWithoutPostInput!]
  connectOrCreate: [CategoriesOnPostsCreateOrConnectWithoutPostInput!]
  createMany: CategoriesOnPostsCreateManyPostInputEnvelope
  connect: [CategoriesOnPostsWhereUniqueInput!]
}

input CategoriesOnPostsCreateOrConnectWithoutCategoryInput {
  where: CategoriesOnPostsWhereUniqueInput!
  create: CategoriesOnPostsCreateWithoutCategoryInput!
}

input CategoriesOnPostsCreateOrConnectWithoutPostInput {
  where: CategoriesOnPostsWhereUniqueInput!
  create: CategoriesOnPostsCreateWithoutPostInput!
}

input CategoriesOnPostsCreateWithoutCategoryInput {
  createdAt: DateTime
  updatedAt: DateTime
  post: PostCreateNestedOneWithoutCategoriesInput!
}

input CategoriesOnPostsCreateWithoutPostInput {
  createdAt: DateTime
  updatedAt: DateTime
  category: CategoryCreateNestedOneWithoutPostsInput!
}

type CategoriesOnPostsGroupBy {
  postId: String!
  categoryId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: CategoriesOnPostsCountAggregate
  _min: CategoriesOnPostsMinAggregate
  _max: CategoriesOnPostsMaxAggregate
}

input CategoriesOnPostsListRelationFilter {
  every: CategoriesOnPostsWhereInput
  some: CategoriesOnPostsWhereInput
  none: CategoriesOnPostsWhereInput
}

type CategoriesOnPostsMaxAggregate {
  postId: String
  categoryId: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CategoriesOnPostsMinAggregate {
  postId: String
  categoryId: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoriesOnPostsOrderByInput {
  postId: SortOrder
  categoryId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input CategoriesOnPostsPostIdCategoryIdCompoundUniqueInput {
  postId: String!
  categoryId: String!
}

enum CategoriesOnPostsScalarFieldEnum {
  postId
  categoryId
  createdAt
  updatedAt
}

input CategoriesOnPostsScalarWhereInput {
  AND: [CategoriesOnPostsScalarWhereInput!]
  OR: [CategoriesOnPostsScalarWhereInput!]
  NOT: [CategoriesOnPostsScalarWhereInput!]
  postId: StringFilter
  categoryId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CategoriesOnPostsScalarWhereWithAggregatesInput {
  AND: [CategoriesOnPostsScalarWhereWithAggregatesInput!]
  OR: [CategoriesOnPostsScalarWhereWithAggregatesInput!]
  NOT: [CategoriesOnPostsScalarWhereWithAggregatesInput!]
  postId: StringWithAggregatesFilter
  categoryId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input CategoriesOnPostsUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCategoriesInput
  category: CategoryUpdateOneRequiredWithoutPostsInput
}

input CategoriesOnPostsUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoriesOnPostsUpdateManyWithoutCategoryInput {
  create: [CategoriesOnPostsCreateWithoutCategoryInput!]
  connectOrCreate: [CategoriesOnPostsCreateOrConnectWithoutCategoryInput!]
  upsert: [CategoriesOnPostsUpsertWithWhereUniqueWithoutCategoryInput!]
  createMany: CategoriesOnPostsCreateManyCategoryInputEnvelope
  connect: [CategoriesOnPostsWhereUniqueInput!]
  set: [CategoriesOnPostsWhereUniqueInput!]
  disconnect: [CategoriesOnPostsWhereUniqueInput!]
  delete: [CategoriesOnPostsWhereUniqueInput!]
  update: [CategoriesOnPostsUpdateWithWhereUniqueWithoutCategoryInput!]
  updateMany: [CategoriesOnPostsUpdateManyWithWhereWithoutCategoryInput!]
  deleteMany: [CategoriesOnPostsScalarWhereInput!]
}

input CategoriesOnPostsUpdateManyWithoutPostInput {
  create: [CategoriesOnPostsCreateWithoutPostInput!]
  connectOrCreate: [CategoriesOnPostsCreateOrConnectWithoutPostInput!]
  upsert: [CategoriesOnPostsUpsertWithWhereUniqueWithoutPostInput!]
  createMany: CategoriesOnPostsCreateManyPostInputEnvelope
  connect: [CategoriesOnPostsWhereUniqueInput!]
  set: [CategoriesOnPostsWhereUniqueInput!]
  disconnect: [CategoriesOnPostsWhereUniqueInput!]
  delete: [CategoriesOnPostsWhereUniqueInput!]
  update: [CategoriesOnPostsUpdateWithWhereUniqueWithoutPostInput!]
  updateMany: [CategoriesOnPostsUpdateManyWithWhereWithoutPostInput!]
  deleteMany: [CategoriesOnPostsScalarWhereInput!]
}

input CategoriesOnPostsUpdateManyWithWhereWithoutCategoryInput {
  where: CategoriesOnPostsScalarWhereInput!
  data: CategoriesOnPostsUpdateManyMutationInput!
}

input CategoriesOnPostsUpdateManyWithWhereWithoutPostInput {
  where: CategoriesOnPostsScalarWhereInput!
  data: CategoriesOnPostsUpdateManyMutationInput!
}

input CategoriesOnPostsUpdateWithoutCategoryInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  post: PostUpdateOneRequiredWithoutCategoriesInput
}

input CategoriesOnPostsUpdateWithoutPostInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  category: CategoryUpdateOneRequiredWithoutPostsInput
}

input CategoriesOnPostsUpdateWithWhereUniqueWithoutCategoryInput {
  where: CategoriesOnPostsWhereUniqueInput!
  data: CategoriesOnPostsUpdateWithoutCategoryInput!
}

input CategoriesOnPostsUpdateWithWhereUniqueWithoutPostInput {
  where: CategoriesOnPostsWhereUniqueInput!
  data: CategoriesOnPostsUpdateWithoutPostInput!
}

input CategoriesOnPostsUpsertWithWhereUniqueWithoutCategoryInput {
  where: CategoriesOnPostsWhereUniqueInput!
  update: CategoriesOnPostsUpdateWithoutCategoryInput!
  create: CategoriesOnPostsCreateWithoutCategoryInput!
}

input CategoriesOnPostsUpsertWithWhereUniqueWithoutPostInput {
  where: CategoriesOnPostsWhereUniqueInput!
  update: CategoriesOnPostsUpdateWithoutPostInput!
  create: CategoriesOnPostsCreateWithoutPostInput!
}

input CategoriesOnPostsWhereInput {
  AND: [CategoriesOnPostsWhereInput!]
  OR: [CategoriesOnPostsWhereInput!]
  NOT: [CategoriesOnPostsWhereInput!]
  post: PostRelationFilter
  postId: StringFilter
  category: CategoryRelationFilter
  categoryId: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CategoriesOnPostsWhereUniqueInput {
  postId_categoryId: CategoriesOnPostsPostIdCategoryIdCompoundUniqueInput
}

type Category {
  id: String!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  posts(where: CategoriesOnPostsWhereInput, orderBy: [CategoriesOnPostsOrderByInput!], cursor: CategoriesOnPostsWhereUniqueInput, take: Int, skip: Int, distinct: [CategoriesOnPostsScalarFieldEnum!]): [CategoriesOnPosts!]!
}

type CategoryCountAggregate {
  id: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

input CategoryCreateInput {
  id: String
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  posts: CategoriesOnPostsCreateNestedManyWithoutCategoryInput
}

input CategoryCreateManyInput {
  id: String
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoryCreateNestedOneWithoutPostsInput {
  create: CategoryCreateWithoutPostsInput
  connectOrCreate: CategoryCreateOrConnectWithoutPostsInput
  connect: CategoryWhereUniqueInput
}

input CategoryCreateOrConnectWithoutPostsInput {
  where: CategoryWhereUniqueInput!
  create: CategoryCreateWithoutPostsInput!
}

input CategoryCreateWithoutPostsInput {
  id: String
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type CategoryGroupBy {
  id: String!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: CategoryCountAggregate
  _min: CategoryMinAggregate
  _max: CategoryMaxAggregate
}

type CategoryMaxAggregate {
  id: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CategoryMinAggregate {
  id: String
  name: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CategoryOrderByInput {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input CategoryRelationFilter {
  is: CategoryWhereInput
  isNot: CategoryWhereInput
}

enum CategoryScalarFieldEnum {
  id
  name
  createdAt
  updatedAt
}

input CategoryScalarWhereWithAggregatesInput {
  AND: [CategoryScalarWhereWithAggregatesInput!]
  OR: [CategoryScalarWhereWithAggregatesInput!]
  NOT: [CategoryScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input CategoryUpdateInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  posts: CategoriesOnPostsUpdateManyWithoutCategoryInput
}

input CategoryUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpdateOneRequiredWithoutPostsInput {
  create: CategoryCreateWithoutPostsInput
  connectOrCreate: CategoryCreateOrConnectWithoutPostsInput
  upsert: CategoryUpsertWithoutPostsInput
  connect: CategoryWhereUniqueInput
  update: CategoryUpdateWithoutPostsInput
}

input CategoryUpdateWithoutPostsInput {
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input CategoryUpsertWithoutPostsInput {
  update: CategoryUpdateWithoutPostsInput!
  create: CategoryCreateWithoutPostsInput!
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: StringFilter
  name: StringFilter
  posts: CategoriesOnPostsListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CategoryWhereUniqueInput {
  id: String
  name: String
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input DateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

type Mutation @extends {
  createCategoriesOnPosts(data: CategoriesOnPostsCreateInput!): CategoriesOnPosts!
  createManyCategoriesOnPosts(data: [CategoriesOnPostsCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  deleteCategoriesOnPosts(where: CategoriesOnPostsWhereUniqueInput!): CategoriesOnPosts
  updateCategoriesOnPosts(data: CategoriesOnPostsUpdateInput!, where: CategoriesOnPostsWhereUniqueInput!): CategoriesOnPosts
  deleteManyCategoriesOnPosts(where: CategoriesOnPostsWhereInput): AffectedRowsOutput!
  updateManyCategoriesOnPosts(data: CategoriesOnPostsUpdateManyMutationInput!, where: CategoriesOnPostsWhereInput): AffectedRowsOutput!
  upsertCategoriesOnPosts(where: CategoriesOnPostsWhereUniqueInput!, create: CategoriesOnPostsCreateInput!, update: CategoriesOnPostsUpdateInput!): CategoriesOnPosts!
  createCategory(data: CategoryCreateInput!): Category!
  createManyCategory(data: [CategoryCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  updateCategory(data: CategoryUpdateInput!, where: CategoryWhereUniqueInput!): Category
  deleteManyCategory(where: CategoryWhereInput): AffectedRowsOutput!
  updateManyCategory(data: CategoryUpdateManyMutationInput!, where: CategoryWhereInput): AffectedRowsOutput!
  upsertCategory(where: CategoryWhereUniqueInput!, create: CategoryCreateInput!, update: CategoryUpdateInput!): Category!
  createPost(data: PostCreateInput!): Post!
  createManyPost(data: [PostCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  deletePost(where: PostWhereUniqueInput!): Post
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  deleteManyPost(where: PostWhereInput): AffectedRowsOutput!
  updateManyPost(data: PostUpdateManyMutationInput!, where: PostWhereInput): AffectedRowsOutput!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

type Post @key(fields: "id") {
  id: String!
  userId: String!
  title: String!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  categories(where: CategoriesOnPostsWhereInput, orderBy: [CategoriesOnPostsOrderByInput!], cursor: CategoriesOnPostsWhereUniqueInput, take: Int, skip: Int, distinct: [CategoriesOnPostsScalarFieldEnum!]): [CategoriesOnPosts!]!
  user: User
}

type PostCountAggregate {
  id: Int!
  userId: Int!
  title: Int!
  content: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

input PostCreateInput {
  id: String
  userId: String!
  title: String!
  content: String!
  createdAt: DateTime
  updatedAt: DateTime
  categories: CategoriesOnPostsCreateNestedManyWithoutPostInput
}

input PostCreateManyInput {
  id: String
  userId: String!
  title: String!
  content: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input PostCreateNestedOneWithoutCategoriesInput {
  create: PostCreateWithoutCategoriesInput
  connectOrCreate: PostCreateOrConnectWithoutCategoriesInput
  connect: PostWhereUniqueInput
}

input PostCreateOrConnectWithoutCategoriesInput {
  where: PostWhereUniqueInput!
  create: PostCreateWithoutCategoriesInput!
}

input PostCreateWithoutCategoriesInput {
  id: String
  userId: String!
  title: String!
  content: String!
  createdAt: DateTime
  updatedAt: DateTime
}

type PostGroupBy {
  id: String!
  userId: String!
  title: String!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: PostCountAggregate
  _min: PostMinAggregate
  _max: PostMaxAggregate
}

type PostMaxAggregate {
  id: String
  userId: String
  title: String
  content: String
  createdAt: DateTime
  updatedAt: DateTime
}

type PostMinAggregate {
  id: String
  userId: String
  title: String
  content: String
  createdAt: DateTime
  updatedAt: DateTime
}

input PostOrderByInput {
  id: SortOrder
  userId: SortOrder
  title: SortOrder
  content: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input PostRelationFilter {
  is: PostWhereInput
  isNot: PostWhereInput
}

enum PostScalarFieldEnum {
  id
  userId
  title
  content
  createdAt
  updatedAt
}

input PostScalarWhereWithAggregatesInput {
  AND: [PostScalarWhereWithAggregatesInput!]
  OR: [PostScalarWhereWithAggregatesInput!]
  NOT: [PostScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
  title: StringWithAggregatesFilter
  content: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input PostUpdateInput {
  id: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  categories: CategoriesOnPostsUpdateManyWithoutPostInput
}

input PostUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpdateOneRequiredWithoutCategoriesInput {
  create: PostCreateWithoutCategoriesInput
  connectOrCreate: PostCreateOrConnectWithoutCategoriesInput
  upsert: PostUpsertWithoutCategoriesInput
  connect: PostWhereUniqueInput
  update: PostUpdateWithoutCategoriesInput
}

input PostUpdateWithoutCategoriesInput {
  id: StringFieldUpdateOperationsInput
  userId: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  content: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PostUpsertWithoutCategoriesInput {
  update: PostUpdateWithoutCategoriesInput!
  create: PostCreateWithoutCategoriesInput!
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: StringFilter
  userId: StringFilter
  categories: CategoriesOnPostsListRelationFilter
  title: StringFilter
  content: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input PostWhereUniqueInput {
  id: String
}

type Query @extends {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
  findUniqueCategoriesOnPosts(where: CategoriesOnPostsWhereUniqueInput!): CategoriesOnPosts
  findFirstCategoriesOnPosts(where: CategoriesOnPostsWhereInput, orderBy: [CategoriesOnPostsOrderByInput!], cursor: CategoriesOnPostsWhereUniqueInput, take: Int, skip: Int, distinct: [CategoriesOnPostsScalarFieldEnum!]): CategoriesOnPosts
  findManyCategoriesOnPosts(where: CategoriesOnPostsWhereInput, orderBy: [CategoriesOnPostsOrderByInput!], cursor: CategoriesOnPostsWhereUniqueInput, take: Int, skip: Int, distinct: [CategoriesOnPostsScalarFieldEnum!]): [CategoriesOnPosts!]!
  aggregateCategoriesOnPosts(where: CategoriesOnPostsWhereInput, orderBy: [CategoriesOnPostsOrderByInput!], cursor: CategoriesOnPostsWhereUniqueInput, take: Int, skip: Int): AggregateCategoriesOnPosts!
  groupByCategoriesOnPosts(where: CategoriesOnPostsWhereInput, orderBy: [CategoriesOnPostsOrderByInput!], by: [CategoriesOnPostsScalarFieldEnum!]!, having: CategoriesOnPostsScalarWhereWithAggregatesInput, take: Int, skip: Int): [CategoriesOnPostsGroupBy!]!
  category(where: CategoryWhereUniqueInput!): Category
  findFirstCategory(where: CategoryWhereInput, orderBy: [CategoryOrderByInput!], cursor: CategoryWhereUniqueInput, take: Int, skip: Int, distinct: [CategoryScalarFieldEnum!]): Category
  categories(where: CategoryWhereInput, orderBy: [CategoryOrderByInput!], cursor: CategoryWhereUniqueInput, take: Int, skip: Int, distinct: [CategoryScalarFieldEnum!]): [Category!]!
  aggregateCategory(where: CategoryWhereInput, orderBy: [CategoryOrderByInput!], cursor: CategoryWhereUniqueInput, take: Int, skip: Int): AggregateCategory!
  groupByCategory(where: CategoryWhereInput, orderBy: [CategoryOrderByInput!], by: [CategoryScalarFieldEnum!]!, having: CategoryScalarWhereWithAggregatesInput, take: Int, skip: Int): [CategoryGroupBy!]!
  post(where: PostWhereUniqueInput!): Post
  findFirstPost(where: PostWhereInput, orderBy: [PostOrderByInput!], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum!]): Post
  posts(where: PostWhereInput, orderBy: [PostOrderByInput!], cursor: PostWhereUniqueInput, take: Int, skip: Int, distinct: [PostScalarFieldEnum!]): [Post!]!
  aggregatePost(where: PostWhereInput, orderBy: [PostOrderByInput!], cursor: PostWhereUniqueInput, take: Int, skip: Int): AggregatePost!
  groupByPost(where: PostWhereInput, orderBy: [PostOrderByInput!], by: [PostScalarFieldEnum!]!, having: PostScalarWhereWithAggregatesInput, take: Int, skip: Int): [PostGroupBy!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

input StringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

type User @extends @key(fields: "id") {
  id: ID! @external
}
